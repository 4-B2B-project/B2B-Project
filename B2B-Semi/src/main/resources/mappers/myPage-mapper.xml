<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="edu.kh.project.myPage.model.mapper.MyPageMapper">

	<!-- 회원정보 수정 -->
	<update id="editInfo" parameterType="Member">
		UPDATE "TB_MEMBER" SET
		MEMBER_NICKNAME = #{memberNickname},
		MEMBER_TEL = #{memberTel},
		MEMBER_BOOK_CATEGORY = #{memberBookCategory},
		MEMBER_ADDRESS =
		#{memberAddress}
		WHERE MEMBER_NO = #{memberNo}
	</update>



	<!-- 프로필 이미지 변경 -->
	<update id="profileImageInfo">
		UPDATE "TB_MEMBER" SET
		PROFILE_IMG = #{profileImg}
		WHERE MEMBER_NO = #{memberNo}
	</update>


	<resultMap id="BookResultMap" type="edu.kh.project.book.model.dto.Book">
    <id property="bookId" column="BOOK_ID"/>
    <result property="title" column="TITLE"/>
    <result property="author" column="AUTHOR"/>
    <result property="coverUrl" column="COVER_URL"/>
    <result property="customerReviewRank" column="CUSTOMER_REVIEW_RANK"/>
    <result property="description" column="DESCRIPTION"/>
    <result property="firstCategory" column="FIRST_CATEGORY"/>
    <result property="secondCategory" column="SECOND_CATEGORY"/>
    <result property="genres" column="{firstCategory=FIRST_CATEGORY,secondCategory=SECOND_CATEGORY}" javaType="String" jdbcType="VARCHAR" />
    <result property="reviewCount" column="REVIEWCOUNT"/>
    <result property="steamCount" column="STEAMCOUNT"/>
	</resultMap>

	<!-- 찜한 도서 목록 조회 -->
	<select id="selectFavoriteBooks" parameterType="Book">
		SELECT 
		b.BOOK_ID,
		b.TITLE,
		b.AUTHOR,
		b.COVER_URL,
		b.CUSTOMER_REVIEW_RANK,
		b.DESCRIPTION,
	    CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
	     (
            SELECT COUNT(*) 
            FROM TB_STARPOINT TBS 
            WHERE TBS.BOOK_ID = b.BOOK_ID
        ) AS REVIEWCOUNT,  <!-- 리뷰 개수 -->
        (
            SELECT COUNT(*) 
            FROM TB_FAVORITE TBF 
            WHERE TBF.BOOK_ID = b.BOOK_ID
        ) AS STEAMCOUNT  <!-- 하트 개수 -->
	   
		FROM TB_FAVORITE f
		JOIN TB_BOOKS b ON f.BOOK_ID =
		b.BOOK_ID
		WHERE f.MEMBER_NO = #{memberNo}
	</select>




	<!-- BoardResultMap 정의 추가 -->
	<resultMap id="BoardResultMap"
		type="edu.kh.project.board.model.dto.Board">
		<id property="boardNo" column="BOARD_NO" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="boardWriteDate" column="BOARD_WRITE_DATE" />
		<result property="boardUpdateDate" column="BOARD_UPDATE_DATE" />
		<result property="readCount" column="READ_COUNT" />
		<result property="boardCode" column="BOARD_CODE" />
		<result property="memberNickname" column="MEMBER_NICKNAME" />
	</resultMap>




	<!-- 작성자의 전체 게시글 수 조회 -->
	<select id="getBoardListCount" resultType="int">
		SELECT COUNT(*)
		FROM
		"TB_BOARD"
		WHERE MEMBER_NO = #{memberNo}
	</select>



	<!-- 작성자의 전체 게시글 목록 조회 -->
	<select id="selectAllBoardList" resultType="Board">
		SELECT
		b.BOARD_NO,
		b.BOARD_TITLE,
		b.BOARD_CONTENT,
		b.BOARD_WRITE_DATE,
		b.BOARD_UPDATE_DATE,
		b.READ_COUNT,
		b.BOARD_CODE,
		m.MEMBER_NICKNAME AS MEMBER_NICKNAME
		FROM
		TB_BOARD b
		JOIN TB_MEMBER m ON b.MEMBER_NO = m.MEMBER_NO
		WHERE
		b.MEMBER_NO = #{memberNo}
		AND b.BOARD_DEL_FL = 'N'
		ORDER BY b.BOARD_NO
		ASC
	</select>





	<!-- 검색 조건에 따른 게시글 수 조회 (검색된 게시글 수를 조회) -->
	<select id="getSearchBoardListCount" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TB_BOARD b
		JOIN TB_MEMBER m ON b.MEMBER_NO =
		m.MEMBER_NO
		WHERE b.MEMBER_NO = #{memberNo}
		<if
			test="searchType != null and searchInput != null and searchInput != ''">
			AND
			<choose>
				<when test="searchType == 'title'">
					b.BOARD_TITLE LIKE '%' || #{searchInput} || '%'
				</when>
				<when test="searchType == 'content'">
					b.BOARD_CONTENT LIKE '%' || #{searchInput} || '%'
				</when>
				<otherwise>
					m.MEMBER_NICKNAME LIKE '%' || #{searchInput} || '%'
				</otherwise>
			</choose>
		</if>
	</select>


	<!-- 게시글 검색 결과 조회 -->
	<select id="searchBoardList" parameterType="map"
		resultType="Board">
		SELECT
		b.BOARD_NO,
		b.BOARD_TITLE,
		b.BOARD_CONTENT,
		b.BOARD_WRITE_DATE,
		b.READ_COUNT,
		b.BOARD_CODE,
		m.MEMBER_NICKNAME
		FROM TB_BOARD b
		JOIN
		TB_MEMBER m ON b.MEMBER_NO = m.MEMBER_NO
		WHERE b.MEMBER_NO =
		#{memberNo}
		AND b.BOARD_DEL_FL = 'N'
		<if
			test="searchType != null and searchInput != null and searchInput != ''">
			AND
			<choose>
				<when test="searchType == 'title'">
					b.BOARD_TITLE LIKE '%' || #{searchInput} || '%'
				</when>
				<when test="searchType == 'content'">
					b.BOARD_CONTENT LIKE '%' || #{searchInput} || '%'
				</when>

				<otherwise>
					m.MEMBER_NICKNAME LIKE '%' || #{searchInput} || '%'
				</otherwise>
			</choose>
		</if>
		ORDER BY b.BOARD_NO ASC
	</select>




	<!-- CommentResultMap 정의 추가 -->
	<resultMap id="CommentResultMap"
		type="edu.kh.project.board.model.dto.Comment">
		<id property="commentNo" column="COMMENT_NO" />
		<result property="commentContent" column="COMMENT_CONTENT" />
		<result property="commentWriteDate" column="COMMENT_WRITE_DATE" />
		<result property="commentDelFl" column="COMMENT_DEL_FL" />
		<result property="parentCommentNo" column="PARENT_COMMENT_NO" />
		<result property="boardNo" column="BOARD_NO" />
		<result property="memberNo" column="MEMBER_NO" />
		<result property="memberNickname" column="MEMBER_NICKNAME" />
		<result property="profileImg" column="PROFILE_IMG" />
	</resultMap>



	<!-- 따른 댓글 수 조회 -->
	<select id="getCommentListCount" resultType="int">
		SELECT COUNT(*)
		FROM
		"TB_COMMENT"
		WHERE MEMBER_NO = #{memberNo}
	</select>


	<!-- 댓글 목록 조회 -->
	<select id="selectAllCommentList" resultMap="CommentResultMap">
		SELECT
		c.COMMENT_NO,
		c.COMMENT_CONTENT,
		c.COMMENT_DEL_FL,
		c.COMMENT_WRITE_DATE,
		c.MEMBER_NO,
		c.BOARD_NO,
		m.MEMBER_NICKNAME,
		m.PROFILE_IMG
		FROM TB_COMMENT c
		JOIN
		TB_MEMBER m ON c.MEMBER_NO = m.MEMBER_NO
		WHERE c.MEMBER_NO =
		#{memberNo}
		AND c.COMMENT_DEL_FL = 'N'
		ORDER BY c.COMMENT_NO ASC
	</select>

	<!-- 검색 조건에 따른 댓글 수 조회 -->
	<select id="getSearchCommentListCount" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TB_COMMENT c
		JOIN TB_MEMBER m ON c.MEMBER_NO =
		m.MEMBER_NO
		WHERE c.MEMBER_NO = #{memberNo}
		<if
			test="searchType != null and searchInput != null and searchInput != ''">
			AND
			<choose>
				<when test="searchType == 'content'">
					c.COMMENT_CONTENT LIKE '%' || #{searchInput} || '%'
				</when>
				<when test="searchType == 'nickname'">
					c.MEMBER_NICKNAME LIKE '%' || #{searchInput} || '%'
				</when>
				<otherwise>
					m.MEMBER_NICKNAME LIKE '%' || #{searchInput} || '%'
				</otherwise>

			</choose>
		</if>
	</select>





	<!-- 댓글 검색 결과 조회 -->
	<select id="searchCommentList" parameterType="map" resultMap="CommentResultMap">
		SELECT
		c.COMMENT_NO,
		c.COMMENT_CONTENT,
		c.COMMENT_DEL_FL,
		c.COMMENT_WRITE_DATE,
		c.PARENT_COMMENT_NO,
		c.MEMBER_NO,
		c.BOARD_NO,
		m.MEMBER_NICKNAME AS MEMBER_NICKNAME,
		m.PROFILE_IMG
		FROM TB_COMMENT c
		JOIN TB_MEMBER m ON c.MEMBER_NO = m.MEMBER_NO
		WHERE c.MEMBER_NO = #{memberNo}
		<if
			test="searchType != null and searchInput != null and searchInput != ''">
			AND
			<choose>
				<when test="searchType == 'content'">
					c.COMMENT_CONTENT LIKE '%' || #{searchInput} || '%'
				</when>
				<when test="searchType == 'nickname'">
					c.MEMBER_NICKNAME LIKE '%' || #{searchInput} || '%'
				</when>
				<otherwise>
					m.MEMBER_NICKNAME LIKE '%' || #{searchInput} || '%'
				</otherwise>
			</choose>
		</if>
		ORDER BY c.COMMENT_NO ASC
	</select>





	<!-- 비밀번호 조회 -->
	<select id="selectPw">
		SELECT MEMBER_PW
		FROM "TB_MEMBER"
		WHERE MEMBER_NO =
		#{memberNo}
	</select>


	<!-- 비밀번호 변경 -->
	<update id="changePw">
		UPDATE "TB_MEMBER" SET
		MEMBER_PW = #{encPw}
		WHERE
		MEMBER_NO = #{memberNo}
	</update>


	<!-- 상세 조회 -->
	<!-- 게시글 상세 정보 조회 -->
	<select id="selectBoardDetail" parameterType="int"
		resultType="Board">
		SELECT
		b.BOARD_NO,
		b.BOARD_TITLE,
		b.BOARD_CONTENT,
		b.BOARD_WRITE_DATE,
		b.BOARD_UPDATE_DATE,
		b.READ_COUNT,
		b.BOARD_CODE,
		b.MEMBER_NO,
		m.MEMBER_NICKNAME AS MEMBER_NICKNAME
		FROM TB_BOARD b
		JOIN TB_MEMBER m ON b.MEMBER_NO = m.MEMBER_NO
		WHERE b.BOARD_NO = #{boardNo}
		AND b.BOARD_DEL_FL = 'N'
	</select>


	<!-- 게시글 부분 수정 (제목/내용) -->
	<update id="boardUpdate">
		UPDATE "TB_BOARD" SET
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent},
		BOARD_UPDATE_DATE = SYSDATE
		WHERE BOARD_NO = #{boardNo}
		AND
		MEMBER_NO = #{memberNo}
	</update>

	<!-- 게시글 삭제 -->
	<update id="boardDelete">
		UPDATE "TB_BOARD" SET
		BOARD_DEL_FL = 'Y'
		WHERE BOARD_NO
		= #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</update>


	<!-- 댓글 상세 조회 -->
	<select id="selectCommentDetail" parameterType="int" resultType="Comment">
	    SELECT
	        c.COMMENT_NO,
	        c.COMMENT_CONTENT,
	        c.COMMENT_WRITE_DATE,
	        c.COMMENT_DEL_FL,
	        c.PARENT_COMMENT_NO,
	        c.BOARD_NO,
	        c.MEMBER_NO,
	        m.MEMBER_NICKNAME AS MEMBER_NICKNAME,
	        m.PROFILE_IMG
	    FROM TB_COMMENT c
	    JOIN TB_MEMBER m ON c.MEMBER_NO = m.MEMBER_NO
	    WHERE c.COMMENT_NO = #{commentNo}
	</select>
	
	<!-- 댓글,답글 등록 -->
	<insert id="replyInsert">
		INSERT INTO "TB_COMMENT"
		VALUES(
			SEQ_COMMENT_NO.NEXTVAL, 
			#{commentContent}, 
			DEFAULT, 
			DEFAULT, 
			
			<!-- 자식 댓글 --> 
			<if test="parentCommentNo != 0">
				#{parentCommentNo},
			</if>
			
			<!-- 부모 댓글 -->
			<if test="parentCommentNo == 0">
				NULL,
			</if>
			#{memberNo},
			#{boardNo} 
		)
	</insert>

	
	
	
	 <!-- 좋아요한 도서 수 가져오기 -->
    <select id="countFavBooks" parameterType="int" resultType="int">
        SELECT COUNT(*)
        TB_FAVORITE
        FROM TB_FAVORITE
        WHERE member_no = #{memberNo}
    </select>
	
	 <!-- 댓글 수 가져오기 -->
    <select id="countComment" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM TB_COMMENT
        WHERE member_no = #{memberNo}
    </select>
    
     <!-- 게시글 수 가져오기 -->
    <select id="countBoard" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM TB_BOARD
        WHERE member_no = #{memberNo}
    </select>
	
	
	




</mapper>
