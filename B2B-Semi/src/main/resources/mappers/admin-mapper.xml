<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.member.model.mapper.AdminMapper">
	
	<!-- 관리자 프로필 사진 변경. -->
	<update id="profileImage">
		UPDATE TB_MEMBER SET
		PROFILE_IMG = #{profileImg}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 관리자 정보 변경. -->
	<update id="editInfo">
		UPDATE TB_MEMBER SET
		MEMBER_NICKNAME = #{memberNickname},
		MEMBER_TEL = #{memberTel},
		MEMBER_BOOK_CATEGORY = #{memberBookCategory},
		MEMBER_ADDRESS = #{memberAddress}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 회원 수 조회. -->
	<select id="memberCount">
		SELECT COUNT(*) FROM TB_MEMBER
		WHERE MEMBER_DEL_FL = 'N'
	</select>
	
	<!-- 회원 전체 목록 조회. -->
	<select id="memberList">
		SELECT * FROM TB_MEMBER
	</select>
	
	<!-- 검색 회원 수 조회. -->
	<select id="searchMemberCount">
		SELECT COUNT(*) FROM TB_MEMBER
		WHERE 1 = 1
		<choose>
			<when test="key == 'id'">
	          AND MEMBER_ID LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'nickname'">
	          AND MEMBER_NICKNAME LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'delflY'">
	          AND MEMBER_DEL_FL LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'delflN'">
	          AND MEMBER_DEL_FL LIKE '%' || #{search} || '%'
	        </when>
		</choose>
	</select>
	
	<!-- 검색으로 회원 목록 조회. -->
	<select id="memberSearchList">
		SELECT * FROM TB_MEMBER
		WHERE 1 = 1
			<choose>
			<when test="key == 'id'">
	          AND MEMBER_ID LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'nickname'">
	          AND MEMBER_NICKNAME LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'delflY'">
	          AND MEMBER_DEL_FL LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'delflN'">
	          AND MEMBER_DEL_FL LIKE '%' || #{search} || '%'
	        </when>
		</choose>
	</select>
	
	<!-- 회원 검색. -->
	<select id="searchMember" parameterType="map" resultType="Member">
		SELECT MEMBER_NO, MEMBER_ID, MEMBER_NICKNAME, TO_CHAR(ENROLL_DATE, 'YYYY"년" MM"월" DD"일"') ENROLL_DATE, MEMBER_DEL_FL
		FROM TB_MEMBER
		WHERE
		<choose>
			<when test='key == "id"'>
				MEMBER_ID LIKE '%' || #{search} || '%'
			</when>
			<when test='key == "nickname"'>
				MEMBER_NICKNAME LIKE '%' || #{search} || '%'
			</when>
			<when test='key == "delflY"'>
				MEMBER_DEL_FL = 'Y'
			</when>
			<when test='key == "delflN"'>
				MEMBER_DEL_FL = 'N'
			</when>
		</choose>
	</select>
	
	<!-- 선택한 회원 정보 조회. -->
	<select id="selectedMember">
		SELECT MEMBER_NO, PROFILE_IMG, MEMBER_NICKNAME, MEMBER_TEL, MEMBER_ADDRESS FROM TB_MEMBER
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 선택한 회원 정보 수정. -->
	<update id="updateInfo">
		UPDATE TB_MEMBER SET
		MEMBER_NICKNAME = #{memberNickname},
		MEMBER_TEL = #{memberTel},
		MEMBER_ADDRESS = #{memberAddress}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 회원 추방/탈퇴 복구. -->
	<update id="updateStatus">
		UPDATE TB_MEMBER
		SET MEMBER_DEL_FL = #{status}
		WHERE MEMBER_NO IN
		<foreach collection="memberIds" item="memberNo" open="(" close=")" separator=",">
			#{memberNo}
		</foreach>
	</update>
	
	<!-- 도서 수 조회. -->
	<select id="bookCount">
		SELECT COUNT(*)
		FROM TB_BOOKS
		WHERE IS_DELETED = 'N'
	</select>
	
	<!-- 도서 목록 조회. -->
	<select id="bookList">
	SELECT
	ROWNUM AS ROW_NUM, BOOK_ID, COVER_URL, TITLE, FULL_TITLE, AUTHOR, DESCRIPTION, FIRST_CATEGORY,
    SECOND_CATEGORY, GENRES, PUB_DATE, CUSTOMER_REVIEW_RANK, REVIEWCOUNT, IS_DELETED
	FROM 
	(SELECT
	BOOK_ID,
	COVER_URL,
    CASE 
        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
        ELSE TITLE
    END AS TITLE,
    TITLE AS FULL_TITLE,
    CASE 
        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
        ELSE AUTHOR
    END AS AUTHOR,
    DESCRIPTION,
    FIRST_CATEGORY,
    SECOND_CATEGORY,
    CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
    TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
    ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
    (
    	SELECT COUNT(*)
    	FROM TB_STARPOINT TBS 
    	WHERE TBS.BOOK_ID = BOOK.BOOK_ID
    ) AS REVIEWCOUNT,
    IS_DELETED

	FROM TB_BOOKS BOOK
	ORDER BY TITLE) BK
	</select>
	
	<!-- 검색한 도서 수 조회. -->
	<select id="searchBookCount">
		SELECT COUNT(*)
		FROM (SELECT
		BOOK_ID,
		COVER_URL,
	
	    CASE 
	        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
	        ELSE TITLE
	    END AS TITLE,
	    TITLE AS FULL_TITLE,
	    CASE 
	        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
	        ELSE AUTHOR
	    END AS AUTHOR,
	    IS_DELETED,
	    PUB_DATE
	
		FROM TB_BOOKS BOOK
		WHERE 1 = 1
		
		<choose>
	        <when test="key == 'title'">
	          AND TITLE LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'name'">
	          AND AUTHOR LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'delfl'">
	          AND IS_DELETED LIKE '%' || #{search} || '%'
	        </when>
		</choose>
		
		ORDER BY TITLE) BK
	</select>
	
	<!-- 검색한 도서 목록 조회. -->
	<select id="bookSearchList">
		SELECT ROWNUM AS ROW_NUM, BOOK_ID, TITLE, AUTHOR, PUB_DATE, IS_DELETED
		FROM (SELECT
		BOOK_ID,
		COVER_URL,
	
	    CASE 
	        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
	        ELSE TITLE
	    END AS TITLE,
	    TITLE AS FULL_TITLE,
	    CASE 
	        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
	        ELSE AUTHOR
	    END AS AUTHOR,
	    IS_DELETED,
	    PUB_DATE
	
		FROM TB_BOOKS BOOK
		WHERE 1 = 1
		
		<choose>
	        <when test="key == 'title'">
	          AND TITLE LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'name'">
	          AND AUTHOR LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'delfl'">
	          AND IS_DELETED LIKE '%' || #{search} || '%'
	        </when>
		</choose>
		
		ORDER BY TITLE) BK
	</select>
	
	<!-- 도서 삭제/삭제 복구. -->
	<update id="updateBookStatus">
		UPDATE TB_BOOKS
		SET IS_DELETED = #{status}
		WHERE BOOK_ID IN
		<foreach collection="bookList" item="bookId" open="(" close=")" separator=",">
			#{bookId}
		</foreach>
	</update>
	
	<!-- 도서 수정 페이지 및 데이터 보내기. -->
	<select id="selectBookDetail">
	SELECT
	ROWNUM AS ROW_NUM, BOOK_ID, COVER_URL, TITLE, FULL_TITLE, AUTHOR, DESCRIPTION, FIRST_CATEGORY,
    SECOND_CATEGORY, PUB_DATE, CUSTOMER_REVIEW_RANK, REVIEWCOUNT, PUBLISHER
	FROM 
	(SELECT
	BOOK_ID,
	COVER_URL,
    CASE 
        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
        ELSE TITLE
    END AS TITLE,
    TITLE AS FULL_TITLE,
    CASE 
        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
        ELSE AUTHOR
    END AS AUTHOR,
    DESCRIPTION,
    FIRST_CATEGORY,
    SECOND_CATEGORY,
    CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
    TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
    ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
    (
    	SELECT COUNT(*)
    	FROM TB_STARPOINT TBS 
    	WHERE TBS.BOOK_ID = BOOK.BOOK_ID
    ) AS REVIEWCOUNT, PUBLISHER
    
	FROM TB_BOOKS BOOK
	ORDER BY TITLE) BK
		WHERE BOOK_ID = #{bookId}
	</select>
	
	<!-- 도서 수정. -->
	<update id="updateBook">
		UPDATE TB_BOOKS SET
		AUTHOR = #{author},
		PUBLISHER = #{publisher},
		DESCRIPTION = #{description},
		UPDATED_AT = SYSDATE
		WHERE BOOK_ID = #{bookId}
	</update>
	
	<!-- 게시판 수 조회. -->
	<select id="boardCount">
		SELECT COUNT(*)
		FROM TB_BOARD
		WHERE BOARD_DEL_FL = 'N'
	</select>
	
	<!-- 게시판 목록 조회. -->
	<select id="boardList">
		SELECT BOARD_NO, BOARD_CODE, BOARD_TITLE, MEMBER_NICKNAME, TO_CHAR(BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_WRITE_DATE,
		BOARD_DEL_FL
		FROM TB_BOARD
		JOIN TB_MEMBER USING (MEMBER_NO)
		ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 검색한 게시글 수 조회. -->
	<select id="searchBoardCount">
		SELECT COUNT(*) FROM TB_BOARD
		JOIN BOARD_KIND USING (BOARD_CODE)
		JOIN TB_MEMBER USING (MEMBER_NO)
		WHERE
		1 = 1
			<choose>
	        <when test="key == 'kind'">
	          AND BOARD_KIND LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'title'">
	          AND BOARD_TITLE LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'nickname'">
	          AND MEMBER_NICKNAME LIKE '%' || #{search} || '%'
	        </when>
		</choose>
	</select>
	
	<!-- 검색한 게시판 조회 / 검색. -->
	<select id="boardSearchList">
		SELECT BOARD_NO, BOARD_CODE, BOARD_TITLE, MEMBER_NICKNAME, TO_CHAR(BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일"') BOARD_WRITE_DATE, BOARD_DEL_FL
		FROM TB_BOARD
		JOIN TB_MEMBER USING (MEMBER_NO)
		JOIN BOARD_KIND USING (BOARD_CODE)
		WHERE 1 = 1
		<choose>
	        <when test="key == 'kind'">
	         AND BOARD_KIND LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'title'">
	         AND BOARD_TITLE LIKE '%' || #{search} || '%'
	        </when>
	        <when test="key == 'nickname'">
	         AND MEMBER_NICKNAME LIKE '%' || #{search} || '%'
	        </when>
		</choose>
		ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 게시글 상세 조회. -->
	<select id="boardDetail">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, BOARD_CODE, READ_COUNT,
		MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,
		TO_CHAR(BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_WRITE_DATE,
		TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_UPDATE_DATE
		FROM "TB_BOARD"
		JOIN "TB_MEMBER" USING (MEMBER_NO)
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<!-- 게시글 수정. -->
	<update id="boardUpdate">
		UPDATE TB_BOARD SET
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent}
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시글 삭제. -->
	<update id="boardDelete">
		UPDATE TB_BOARD SET
		BOARD_DEL_FL = 'Y'
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시글 삭제/삭제 복구. -->
	<update id="updateBoardStatus">
		UPDATE TB_BOARD
		SET BOARD_DEL_FL = #{status}
		WHERE BOARD_NO IN
		<foreach collection="boardList" item="boardNo" open="(" close=")" separator=",">
			#{boardNo}
		</foreach>
	</update>

</mapper>