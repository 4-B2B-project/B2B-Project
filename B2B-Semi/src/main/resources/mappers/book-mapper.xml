<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.book.model.mapper.BookMapper">

	
	<!-- 메인 페이지 도서 목록 조회  -->
	<select id="mainBookList">
		SELECT 
		    COVER_URL,
		    TITLE,
		    AUTHOR,
		    CUSTOMER_REVIEW_RANK,
		    REVIEWCOUNT,
		    PUB_DATE
		FROM 
		    (
		        SELECT 
		            COVER_URL,
		            TITLE,
		            AUTHOR,
		            ROUND(CUSTOMER_REVIEW_RANK, 1) AS CUSTOMER_REVIEW_RANK,
		            (SELECT COUNT(*) 
		             FROM "TB_STARPOINT" TBS
		             WHERE TBS.BOOK_ID = BOOK.BOOK_ID) AS REVIEWCOUNT,
		            TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE
		        FROM "TB_BOOKS" BOOK
		        WHERE IS_DELETED = 'N'
		         AND PUB_DATE BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC(SYSDATE, 'IW') + 6
		        ORDER BY CUSTOMER_REVIEW_RANK DESC
		    )
		<![CDATA[
		WHERE ROWNUM <= 20
		]]>
	</select>
	
	
	<!-- 도서 상세 조회 -->
	<select id="srchBook">
		SELECT COUNT(*)
		FROM "TB_BOOKS"
		WHERE ISBN = #{isbn}
	</select>
	

	<!-- 다중 Book 객체 삽입 -->
    <insert id="insertBook" parameterType="Book">
        INSERT INTO TB_BOOKS (
            BOOK_ID,
            TITLE,
            ISBN,
            AUTHOR,
            PUBLISHER,
            PUB_DATE,
            DESCRIPTION,
            COVER_URL,
            FIRST_CATEGORY,
            SECOND_CATEGORY,
            IS_DELETED,
            CREATED_AT,
            UPDATED_AT,
            CUSTOMER_REVIEW_RANK
        )
        VALUES
        (
            #{bookId},
            #{title},
            #{isbn},
            #{author},
            #{publisher},
            #{pubDate},
            #{description},
            #{coverUrl},
            #{firstCategory},
            #{secondCategory},
            DEFAULT,
            DEFAULT,
            #{updatedAt},
            0
        )
    </insert>


	<!-- 도서 목록 개수 조회 -->
	<select id="bookCount">
		SELECT COUNT(*)
		FROM "TB_BOOKS"
		WHERE IS_DELETED = 'N'
	</select>
	
	
	<!-- 도서 목록 조회 -->
	<select id="bookList" resultType="Book">
		SELECT
			ROWNUM AS ROW_NUM,
    		BOOK_ID,
    		COVER_URL,
		    TITLE,
		    FULL_TITLE,
		    AUTHOR,
		    DESCRIPTION,
		    FIRST_CATEGORY,
		    SECOND_CATEGORY,
		    GENRES,
		    PUB_DATE,
		    CUSTOMER_REVIEW_RANK,
		    REVIEWCOUNT,
		    STEAMCOUNT
		FROM 
		(SELECT
    		BOOK_ID,
    		COVER_URL,
		    CASE 
		        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
		        ELSE TITLE
		    END AS TITLE,
		    TITLE AS FULL_TITLE,
		    CASE 
		        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
		        ELSE AUTHOR
		    END AS AUTHOR,
		    DESCRIPTION,
		    FIRST_CATEGORY,
		    SECOND_CATEGORY,
		    CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
		    TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
		    ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
		    (
		    	SELECT COUNT(*) 
		    	FROM TB_STARPOINT TBS 
		    	WHERE TBS.BOOK_ID = BOOK.BOOK_ID
		    ) AS REVIEWCOUNT,
		    (
		    	SELECT COUNT(*) 
		    	FROM TB_FAVORITE TBF 
		    	WHERE TBF.BOOK_ID = BOOK.BOOK_ID
		    ) AS STEAMCOUNT
		FROM TB_BOOKS BOOK
		WHERE IS_DELETED = 'N'
		ORDER BY TITLE) BK
	</select>
	
	
	<!-- 도서 목록 검색 개수 조회 -->
	<select id="bookSearchCount">
		SELECT COUNT(*)
		FROM "TB_BOOKS"
		WHERE IS_DELETED = 'N'
		<choose>
			<when test='searchType == "title"'>
				AND TITLE LIKE '%' || #{searchInput} || '%'
			</when>
			<when test='searchType == "author"'>
				AND AUTHOR LIKE '%' || #{searchInput} || '%'
			</when>
			<when test='searchType == "genre"'>
				AND (
					FIRST_CATEGORY LIKE '%' || #{searchInput} || '%'
					OR
					SECOND_CATEGORY LIKE '%' || #{searchInput} || '%'
				)
			</when>
		</choose>
		<if test='genreFilter != "all" and genreFilter != ""'>
			AND (
				FIRST_CATEGORY LIKE '%' || #{genreFilter} || '%'
				OR
				SECOND_CATEGORY LIKE '%' || #{genreFilter} || '%'
			)
		</if>
		<if test='ratingFilter != ""'>
			<![CDATA[
				AND CUSTOMER_REVIEW_RANK >= ${ratingFilter} AND CUSTOMER_REVIEW_RANK < ${nextRatingFilter}
			]]>
		</if>
	</select>
	
	
	<!-- 도서 목록 검색 조회 -->
	<select id="bookSearchList" resultType="Book">
		SELECT 
		    ROWNUM AS ROW_NUM,
		    BOOK_ID,
		    COVER_URL,
		    TITLE,
		    FULL_TITLE,
		    AUTHOR,
		    CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
		    DESCRIPTION,
		    FIRST_CATEGORY,
		    SECOND_CATEGORY,
		    PUB_DATE,
		    CUSTOMER_REVIEW_RANK,
		    REVIEWCOUNT,
		    STEAMCOUNT
		FROM 
		(SELECT
    		BOOK_ID,
    		COVER_URL,
		    CASE 
		        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
		        ELSE TITLE
		    END AS TITLE,
		    TITLE AS FULL_TITLE,
		    CASE 
		        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
		        ELSE AUTHOR
		    END AS AUTHOR,
		    DESCRIPTION,
		    FIRST_CATEGORY,
		    SECOND_CATEGORY,
		    TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
		    ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
		    (
		    	SELECT COUNT(*) 
		    	FROM TB_STARPOINT TBS 
		    	WHERE TBS.BOOK_ID = BOOK.BOOK_ID
		    ) AS REVIEWCOUNT,
		    (
		    	SELECT COUNT(*) 
		    	FROM TB_FAVORITE TBF 
		    	WHERE TBF.BOOK_ID = BOOK.BOOK_ID
		    ) AS STEAMCOUNT
		FROM TB_BOOKS BOOK
		WHERE IS_DELETED = 'N'
		<if test='searchInput != ""'>
			<choose>
				<when test='searchType == "title"'>
					AND TITLE LIKE '%' || #{searchInput} || '%'
				</when>
				<when test='searchType == "author"'>
					AND AUTHOR LIKE '%' || #{searchInput} || '%'
				</when>
				<when test='searchType == "genre"'>
					AND (
						FIRST_CATEGORY LIKE '%' || #{searchInput} || '%'
						OR
						SECOND_CATEGORY LIKE '%' || #{searchInput} || '%'
					)
				</when>
			</choose>
		</if>
		<if test='genreFilter != "all" and genreFilter != ""'>
			AND (
				FIRST_CATEGORY LIKE '%' || #{genreFilter} || '%'
				OR
				SECOND_CATEGORY LIKE '%' || #{genreFilter} || '%'
			)
		</if>
		<if test='ratingFilter != ""'>
			<![CDATA[
				AND CUSTOMER_REVIEW_RANK >= ${ratingFilter} AND CUSTOMER_REVIEW_RANK < ${nextRatingFilter}
			]]>
		</if>
		ORDER BY TITLE
		) BK
	</select>
	
	
	<!-- 해당 도서 리뷰 목록 조회 -->
	<select id="selectReviewList">
		SELECT 
			"COMMENT",
			TO_CHAR(COMMENT_WRITE_DATE, 'YYYY-MM-DD') AS WRITE_DATE,
			STAR_POINT,
			MEMBER_NICKNAME,
			PROFILE_IMG,
			MEMBER_NO
		FROM "TB_STARPOINT"
		JOIN "TB_MEMBER" USING(MEMBER_NO)
		WHERE BOOK_ID = #{bookId}
		AND COMMENT_DEL_FL = 'N'
	</select>
	
	
	<!-- 해당 멤버의 도서 리뷰작성 여부 조회 -->
	<select id="selectReviewMember">
		SELECT 
			COUNT(*)
		FROM "TB_STARPOINT"
		JOIN "TB_MEMBER" USING(MEMBER_NO)
		WHERE BOOK_ID = #{bookId}
		AND MEMBER_NO = #{memberNo}
		AND COMMENT_DEL_FL = 'N'
	</select>
	
	
	<!-- 책 리뷰 작성 -->
	<insert id="insertBookReview">
		INSERT INTO "TB_STARPOINT"
		VALUES(
			#{memberNo},
			#{bookId},
			#{starPoint},
			#{comment},
			DEFAULT,
			NULL,
			DEFAULT			
		)
	</insert>
	
	
	<!-- 별점 평균 값 가져오기 -->
	<select id="getBookRatingData">
		SELECT 
			AVG(STAR_POINT) AS AVERAGERATING, 
			COUNT(*) AS REVIEWCOUNT
		FROM "TB_STARPOINT"
		WHERE BOOK_ID = #{bookId}
		AND COMMENT_DEL_FL = 'N'
	</select>
	
	
	<!-- 별점 수정 -->
	<update id="updateBookRating">
		UPDATE "TB_BOOKS"
		SET
			CUSTOMER_REVIEW_RANK = #{averageRating}
		WHERE BOOK_ID = #{bookId}
		AND IS_DELETED = 'N'
	</update>
	
	
	<!-- top20 도서 목록 조회 -->
	<select id="topList">
		SELECT 
		    BOOK_ID,
		    COVER_URL,
		    TITLE,
		    FULL_TITLE,
		    AUTHOR,
		    CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
		    DESCRIPTION,
		    FIRST_CATEGORY,
		    SECOND_CATEGORY,
		    PUB_DATE,
		    CUSTOMER_REVIEW_RANK,
		    REVIEWCOUNT,
		    STEAMCOUNT
		FROM 
		    (
		        SELECT 
		            BOOK_ID,
		    		COVER_URL,
				    CASE 
				        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
				        ELSE TITLE
				    END AS TITLE,
				    TITLE AS FULL_TITLE,
				    CASE 
				        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
				        ELSE AUTHOR
				    END AS AUTHOR,
				    DESCRIPTION,
				    FIRST_CATEGORY,
				    SECOND_CATEGORY,
				    TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
				    ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
				    (
				    	SELECT COUNT(*) 
				    	FROM TB_STARPOINT TBS 
				    	WHERE TBS.BOOK_ID = BOOK.BOOK_ID
				    ) AS REVIEWCOUNT,
				    (
				    	SELECT COUNT(*) 
				    	FROM TB_FAVORITE TBF 
				    	WHERE TBF.BOOK_ID = BOOK.BOOK_ID
				    ) AS STEAMCOUNT
		        FROM "TB_BOOKS" BOOK
		        WHERE IS_DELETED = 'N'
		        ORDER BY CUSTOMER_REVIEW_RANK DESC
		    )
	    <![CDATA[
		WHERE ROWNUM <= 20
		]]>
	</select>
	
	
	<!-- 장르별 랭킹 목록 조회(해당장르별 가장많은 도서 등록 데이터 5개 불러와서 조회)-->
	<select id="bookCategoryList">
		<![CDATA[
			WITH RankedBooks AS (
			    SELECT 
			        b.*, 
			        ROW_NUMBER() OVER (PARTITION BY b.FIRST_CATEGORY ORDER BY b.CUSTOMER_REVIEW_RANK DESC) AS rank_num
			    FROM TB_BOOKS b
			    WHERE IS_DELETED = 'N'
			    ORDER BY CUSTOMER_REVIEW_RANK DESC
			),
			SelectedGroups AS (
			    SELECT 
			    	FIRST_CATEGORY,
			    	book_count,
			    	rank_num
			    FROM (
			    	SELECT 
				        FIRST_CATEGORY,
				        COUNT(*) AS book_count,
				        RANK() OVER (ORDER BY COUNT(*) DESC) AS rank_num
				    FROM TB_BOOKS
				    WHERE IS_DELETED = 'N'
				    GROUP BY FIRST_CATEGORY
			    )
			    WHERE rank_num <= 5
			)
			SELECT
				FIRST_CATEGORY,
				COVER_URL,
			  	TITLE,
			  	AUTHOR,
			  	ROUND(CUSTOMER_REVIEW_RANK, 1) AS CUSTOMER_REVIEW_RANK,
			  	(
			  		SELECT COUNT(*) 
			   		FROM "TB_STARPOINT" TBS
			   		WHERE TBS.BOOK_ID = BOOK.BOOK_ID
			   	) AS REVIEWCOUNT,
			  	TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
			  	RANK_NUM
			FROM RankedBooks BOOK
			WHERE rank_num <= 10
			AND FIRST_CATEGORY IN (SELECT FIRST_CATEGORY FROM SelectedGroups)
			ORDER BY FIRST_CATEGORY, rank_num
		]]>
	</select>
	
	
	<!-- 장르별 베스트 top10 페이지 장르 목록 -->
	<select id="selectCategoryList">
		SELECT 
			FIRST_CATEGORY 
		FROM "TB_BOOKS"
		GROUP BY FIRST_CATEGORY 
	</select>
	
	
	<!-- 선택된 장르 도서 top10 조회 -->
	<select id="selectCategortBestBook">
		<![CDATA[
		SELECT 
			BOOK_ID,
		  	COVER_URL,
		 	TITLE,
		 	FULL_TITLE,
			AUTHOR,
		  	CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
		  	DESCRIPTION,
		  	FIRST_CATEGORY,
		  	SECOND_CATEGORY,
		  	PUB_DATE,
		  	CUSTOMER_REVIEW_RANK,
		  	REVIEWCOUNT,
		  	STEAMCOUNT
		FROM
			(SELECT
					BOOK_ID,
					COVER_URL,
				  	CASE 
				     	WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
				     	ELSE TITLE
				  	END AS TITLE,
				  	TITLE AS FULL_TITLE,
				  	CASE 
				      	WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
				     	ELSE AUTHOR
				  	END AS AUTHOR,
				  	DESCRIPTION,
				  	FIRST_CATEGORY,
				  	SECOND_CATEGORY,
				  	TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
				  	ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
				  	(
				  		SELECT COUNT(*) 
				  		FROM TB_STARPOINT TBS 
				  		WHERE TBS.BOOK_ID = BOOK.BOOK_ID
				  	) AS REVIEWCOUNT,
				  	(
				    	SELECT COUNT(*) 
				    	FROM TB_FAVORITE TBF 
				    	WHERE TBF.BOOK_ID = BOOK.BOOK_ID
				    ) AS STEAMCOUNT
				FROM "TB_BOOKS" BOOK
				WHERE FIRST_CATEGORY LIKE '%' || #{category} || '%'
				AND IS_DELETED = 'N'
				ORDER BY CUSTOMER_REVIEW_RANK DESC) BK
		WHERE ROWNUM <= 10
		]]>
	</select>
	
	
	<!-- 월간 도서 랭킹 top10 조회 -->
	<select id="selectMonthPeriodList">
		<![CDATA[
		SELECT 
		    BOOK_ID,
			COVER_URL,
			TITLE,
			FULL_TITLE,
			AUTHOR,
			CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
			DESCRIPTION,
			FIRST_CATEGORY,
			SECOND_CATEGORY,
			PUB_DATE,
			CUSTOMER_REVIEW_RANK,
			REVIEWCOUNT,
			STEAMCOUNT
		FROM 
		    (
		        SELECT 
		            BOOK_ID,
					COVER_URL,
				  	CASE 
				     	WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
				     	ELSE TITLE
				  	END AS TITLE,
				  	TITLE AS FULL_TITLE,
				  	CASE 
				      	WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
				     	ELSE AUTHOR
				  	END AS AUTHOR,
				  	DESCRIPTION,
				  	FIRST_CATEGORY,
				  	SECOND_CATEGORY,
				  	TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
				  	ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
				  	(
				  		SELECT COUNT(*) 
				  		FROM TB_STARPOINT TBS 
				  		WHERE TBS.BOOK_ID = BOOK.BOOK_ID
				  	) AS REVIEWCOUNT,
				  	(
			    		SELECT COUNT(*) 
			    		FROM TB_FAVORITE TBF 
		    			WHERE TBF.BOOK_ID = BOOK.BOOK_ID
				    ) AS STEAMCOUNT
		        FROM "TB_BOOKS" BOOK
		        WHERE IS_DELETED = 'N'
		         AND PUB_DATE BETWEEN TRUNC(SYSDATE, 'MM') AND LAST_DAY(SYSDATE)
		        ORDER BY CUSTOMER_REVIEW_RANK DESC
		    )
		WHERE ROWNUM <= 10
		]]>
	</select>
	
	
	<!-- 연간 도서 랭킹 top10 조회 -->
	<select id="selectYearPeriodList">
		<![CDATA[
		SELECT 
		    BOOK_ID,
			COVER_URL,
			TITLE,
			FULL_TITLE,
			AUTHOR,
			CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
			DESCRIPTION,
			FIRST_CATEGORY,
			SECOND_CATEGORY,
			PUB_DATE,
			CUSTOMER_REVIEW_RANK,
			REVIEWCOUNT,
			STEAMCOUNT
		FROM 
		    (
		        SELECT 
		            BOOK_ID,
					COVER_URL,
				  	CASE 
				     	WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
				     	ELSE TITLE
				  	END AS TITLE,
				  	TITLE AS FULL_TITLE,
				  	CASE 
				      	WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
				     	ELSE AUTHOR
				  	END AS AUTHOR,
				  	DESCRIPTION,
				  	FIRST_CATEGORY,
				  	SECOND_CATEGORY,
				  	TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
				  	ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
				  	(
				  		SELECT COUNT(*) 
				  		FROM TB_STARPOINT TBS 
				  		WHERE TBS.BOOK_ID = BOOK.BOOK_ID
				  	) AS REVIEWCOUNT,
				  	(
			    		SELECT COUNT(*) 
			    		FROM TB_FAVORITE TBF 
		    			WHERE TBF.BOOK_ID = BOOK.BOOK_ID
				    ) AS STEAMCOUNT
		        FROM "TB_BOOKS" BOOK
		        WHERE IS_DELETED = 'N'
		         AND PUB_DATE BETWEEN TRUNC(SYSDATE, 'YY') AND ADD_MONTHS(TRUNC(SYSDATE, 'YY'), 12) - 1
		        ORDER BY CUSTOMER_REVIEW_RANK DESC
		    )
		WHERE ROWNUM <= 10
		]]>
	</select>
	
	
	<!-- 상세 기간별 랭킹 개수 조회 -->
	<select id="bookDetailPeriodListCount">
		SELECT COUNT(*)
		FROM "TB_BOOKS"
		WHERE IS_DELETED = 'N'
		AND TO_CHAR(PUB_DATE, 'YYYY-MM-DD') BETWEEN #{startDay} AND #{endDay}
	</select>
	
	
	<!-- 상세 기간별 랭킹 조회 -->
	<select id="bookDetailPeriodList" resultType="Book">
		SELECT
			ROWNUM AS ROW_NUM,
    		BOOK_ID,
    		COVER_URL,
		    TITLE,
		    FULL_TITLE,
		    AUTHOR,
		    DESCRIPTION,
		    FIRST_CATEGORY,
		    SECOND_CATEGORY,
		    GENRES,
		    PUB_DATE,
		    CUSTOMER_REVIEW_RANK,
		    REVIEWCOUNT,
		    STEAMCOUNT
		FROM 
			(SELECT
	    		BOOK_ID,
	    		COVER_URL,
			    CASE 
			        WHEN INSTR(TITLE, '-') > 0 THEN SUBSTR(TITLE, 1, INSTR(TITLE, '-') - 1)
			        ELSE TITLE
			    END AS TITLE,
			    TITLE AS FULL_TITLE,
			    CASE 
			        WHEN INSTR(AUTHOR, ',') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ',') - 1)
			        ELSE AUTHOR
			    END AS AUTHOR,
			    DESCRIPTION,
			    FIRST_CATEGORY,
			    SECOND_CATEGORY,
			    CONCAT(FIRST_CATEGORY, CONCAT(',', SECOND_CATEGORY)) GENRES,
			    TO_CHAR(PUB_DATE, 'YYYY-MM-DD') AS PUB_DATE,
			    ROUND(CUSTOMER_REVIEW_RANK, 1) CUSTOMER_REVIEW_RANK,
			    (
			    	SELECT COUNT(*) 
			    	FROM TB_STARPOINT TBS 
			    	WHERE TBS.BOOK_ID = BOOK.BOOK_ID
			    ) AS REVIEWCOUNT,
			    (
		    		SELECT COUNT(*) 
		    		FROM TB_FAVORITE TBF 
	    			WHERE TBF.BOOK_ID = BOOK.BOOK_ID
			    ) AS STEAMCOUNT
			FROM "TB_BOOKS" BOOK
			WHERE IS_DELETED = 'N'
			AND TO_CHAR(PUB_DATE, 'YYYY-MM-DD') BETWEEN #{startDay} AND #{endDay}
			ORDER BY CUSTOMER_REVIEW_RANK DESC
		) BK
	</select>
	
	
	<!-- 리뷰 수정 -->
	<update id="updateBookReview">
		UPDATE "TB_STARPOINT"
		SET
			STAR_POINT = #{starPoint},
			"COMMENT" = #{comment},
			COMMENT_FIX_DATE = SYSDATE
		WHERE BOOK_ID = #{bookId}
		AND MEMBER_NO = #{memberNo}
		AND COMMENT_DEL_FL = 'N'
	</update>
	
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview">
		DELETE FROM "TB_STARPOINT"
		WHERE BOOK_ID = #{bookId}
		AND MEMBER_NO = #{memberNo}
	</delete>
	
	
	<!-- 찜 여부 확인 -->
	<select id="selectSteamBook">
		SELECT COUNT(*)
		FROM "TB_FAVORITE"
		WHERE BOOK_ID = #{bookId}
		AND MEMBER_NO = #{memberNo}
	</select>
	
	
	<!-- 찜 삭제 -->
	<delete id="deleteSteamBook">
		DELETE FROM "TB_FAVORITE" 
		WHERE BOOK_ID = #{bookId}
		AND MEMBER_NO = #{memberNo}
	</delete>
	
	
	<!-- 찜 등록 -->
	<insert id="insertSteamBook">
		INSERT INTO "TB_FAVORITE"
		VALUES(#{bookId}, #{memberNo}, DEFAULT)
	</insert>

</mapper>
